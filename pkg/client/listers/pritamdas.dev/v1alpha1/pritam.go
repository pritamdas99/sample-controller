/*
Copyright Obaydullah.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/PritamDas17021999/sample-controller/pkg/apis/pritamdas.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PritamLister helps list Pritams.
// All objects returned here must be treated as read-only.
type PritamLister interface {
	// List lists all Pritams in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Pritam, err error)
	// Pritams returns an object that can list and get Pritams.
	Pritams(namespace string) PritamNamespaceLister
	PritamListerExpansion
}

// pritamLister implements the PritamLister interface.
type pritamLister struct {
	indexer cache.Indexer
}

// NewPritamLister returns a new PritamLister.
func NewPritamLister(indexer cache.Indexer) PritamLister {
	return &pritamLister{indexer: indexer}
}

// List lists all Pritams in the indexer.
func (s *pritamLister) List(selector labels.Selector) (ret []*v1alpha1.Pritam, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Pritam))
	})
	return ret, err
}

// Pritams returns an object that can list and get Pritams.
func (s *pritamLister) Pritams(namespace string) PritamNamespaceLister {
	return pritamNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PritamNamespaceLister helps list and get Pritams.
// All objects returned here must be treated as read-only.
type PritamNamespaceLister interface {
	// List lists all Pritams in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Pritam, err error)
	// Get retrieves the Pritam from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Pritam, error)
	PritamNamespaceListerExpansion
}

// pritamNamespaceLister implements the PritamNamespaceLister
// interface.
type pritamNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Pritams in the indexer for a given namespace.
func (s pritamNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Pritam, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Pritam))
	})
	return ret, err
}

// Get retrieves the Pritam from the indexer for a given namespace and name.
func (s pritamNamespaceLister) Get(name string) (*v1alpha1.Pritam, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pritam"), name)
	}
	return obj.(*v1alpha1.Pritam), nil
}
